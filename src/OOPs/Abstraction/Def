1. Abstraction
Abstraction is the process of hiding the complexity of a system and showing only the essential or relevant features to the user. It allows you to focus on "what" an object does rather than "how" it does it. In Java, abstraction is achieved using abstract classes and interfaces.

Key Points of Abstraction:
Hides implementation details: Users don’t need to know the complex logic behind an object’s behavior.
Shows essential features: Only the relevant features are shown to the user, abstracting the internal complexity.
Achieved via abstract classes and interfaces: Abstract classes allow partial abstraction, while interfaces offer complete abstraction.

Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is a non-access modifier, used for classes and methods:

Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).
An abstract class can have both abstract and regular methods:
Abstraction is one of the four core principles of object-oriented programming (OOP), along with inheritance, polymorphism, and encapsulation. It focuses on hiding the complexity of a system and exposing only the essential parts to the user, making code easier to maintain, understand, and extend.

In Java, abstraction can be achieved in two ways:

Abstract Classes
Interfaces
Key Points of Abstraction:
Hide implementation details: Abstraction hides internal implementation details and shows only the necessary features of an object.
Focus on "what" an object does, rather than "how" it does it.
It helps reduce code complexity and increases reusability and maintainability.