Access Specifiers in Java
In Java, access specifiers (also known as access modifiers) are keywords that control the visibility or accessibility of classes, methods, constructors, and variables. They determine how accessible these elements are within the class itself, within the package, subclasses, or outside the package.

Java provides four main access specifiers:

Public
Private
Protected
Default (Package-Private)

1. Public Access Modifier
Keyword: public
Visibility: The class, method, constructor, or variable declared as public is accessible from anywhere, i.e., from any other class, package, or even from outside the program (in case of public classes).
Key Points:
Can be accessed from the same class, package, subclass, and any other package.
A public class can be instantiated by any other class.
Example:
java
Copy code
public class PublicClass {
    public int number = 5;

    public void display() {
        System.out.println("This is a public method.");
    }
}

public class Test {
    public static void main(String[] args) {
        PublicClass obj = new PublicClass();
        System.out.println(obj.number);  // Accessible
        obj.display();                   // Accessible
    }
}
2. Private Access Modifier
Keyword: private
Visibility: The class members (variables, methods, or constructors) declared as private are only accessible within the same class. They are hidden from all other classes, including subclasses or classes in the same package.
Key Points:
Only accessible within the same class.
Not visible to subclasses or classes in the same package.
Provides the highest level of data hiding.
Example:
java
Copy code
public class PrivateClass {
    private int number = 10;

    private void display() {
        System.out.println("This is a private method.");
    }

    public void accessPrivateMethod() {
        display(); // Accessible within the same class
    }
}

public class Test {
    public static void main(String[] args) {
        PrivateClass obj = new PrivateClass();
        // System.out.println(obj.number);  // Compilation error: number is private
        // obj.display();  // Compilation error: display() is private
        obj.accessPrivateMethod();  // Access through public method
    }
}
3. Protected Access Modifier
Keyword: protected
Visibility: The members declared as protected can be accessed within the same package and by subclasses in other packages. It is more restrictive than public but less restrictive than private.
Key Points:
Accessible within the same package and subclasses (even if they are in a different package).
Suitable for inheritance scenarios.
Protected members can be accessed by subclasses using inheritance.
Example:
java
Copy code
package packageA;

public class ProtectedClass {
    protected int number = 20;

    protected void display() {
        System.out.println("This is a protected method.");
    }
}

package packageB;

import packageA.ProtectedClass;

public class SubClass extends ProtectedClass {
    public static void main(String[] args) {
        SubClass obj = new SubClass();
        System.out.println(obj.number);  // Accessible via inheritance
        obj.display();                   // Accessible via inheritance
    }
}
4. Default Access Modifier (Package-Private)
Keyword: No keyword is required (itâ€™s the default access level).
Visibility: Members declared without any access modifier are accessible only within the same package (also called package-private access). They cannot be accessed from classes in other packages, including subclasses.
Key Points:
Accessible within the same package only.
Not accessible from subclasses or classes in different packages.
No specific keyword is used to define this.
Example:
java
Copy code
class DefaultClass {
    int number = 30;  // Default access (Package-Private)

    void display() {
        System.out.println("This is a default access method.");
    }
}

public class Test {
    public static void main(String[] args) {
        DefaultClass obj = new DefaultClass();
        System.out.println(obj.number);  // Accessible within the same package
        obj.display();                   // Accessible within the same package
    }
}


In Java, **non-access modifiers** are keywords that provide additional functionality or behavior to classes, methods, or variables, but they don't control **access level** (like `public`, `private`, or `protected`). These modifiers include `static`, `final`, `abstract`, `synchronized`, `volatile`, and others.

Here's a breakdown of some important non-access modifiers:

### 1. **`static`**
- **Usage**: Can be applied to variables, methods, blocks, and nested classes.
- **Purpose**: Belongs to the class, not instances of the class.
  - Static variables: Shared among all instances.
  - Static methods: Can be called without creating an object.

**Example:**
```java
class Example {
    static int counter = 0;  // Shared by all instances

    public static void incrementCounter() {
        counter++;
    }
}
```

### 2. **`final`**
- **Usage**: Can be applied to classes, methods, and variables.
- **Purpose**:
  - **`final` class**: Prevents inheritance (i.e., no subclass can extend a `final` class).
  - **`final` method**: Prevents method overriding.
  - **`final` variable**: Prevents reassignment (i.e., makes the variable constant).

**Example:**
```java
final class MyClass {    // Cannot be subclassed
    final int MAX_VALUE = 100;  // Cannot be changed

    final void display() {  // Cannot be overridden
        System.out.println("Display method");
    }
}
```

### 3. **`abstract`**
- **Usage**: Can be applied to classes and methods.
- **Purpose**:
  - **`abstract` class**: Cannot be instantiated and may contain abstract methods (methods without implementation).
  - **`abstract` method**: Must be implemented by any subclass.

**Example:**
```java
abstract class Animal {
    abstract void sound();  // No implementation, must be implemented by subclasses
}

class Dog extends Animal {
    void sound() {
        System.out.println("Woof!");
    }
}
```

### 4. **`synchronized`**
- **Usage**: Can be applied to methods or blocks.
- **Purpose**: Used for thread synchronization, ensuring that only one thread can access the method or block at a time.

**Example:**
```java
class Counter {
    private int count = 0;

    public synchronized void increment() {  // Thread-safe method
        count++;
    }
}
```

### 5. **`volatile`**
- **Usage**: Can be applied to variables.
- **Purpose**: Indicates that a variable may be modified by multiple threads, ensuring that the latest value is always read from memory.

**Example:**
```java
class SharedData {
    volatile boolean flag = false;  // Ensures the latest value is read
}
```

### 6. **`transient`**
- **Usage**: Can be applied to instance variables.
- **Purpose**: Prevents the variable from being serialized (i.e., excluded from object serialization).

**Example:**
```java
class Person implements Serializable {
    String name;
    transient int age;  // Will not be serialized
}
```

### 7. **`strictfp`**
- **Usage**: Can be applied to classes, methods, and interfaces.
- **Purpose**: Ensures floating-point calculations are consistent across different platforms.

**Example:**
```java
strictfp class Calculator {
    public float calculate() {
        return 1.2f + 2.3f;
    }
}
```

---

### **Summary of Common Non-Access Modifiers**

| Modifier   | Usage                        | Purpose |
|------------|------------------------------|---------|
| `static`   | Methods, variables, blocks    | Belongs to the class, not instances |
| `final`    | Classes, methods, variables   | Prevents inheritance, overriding, or reassignment |
| `abstract` | Classes, methods              | Defines classes or methods without implementation |
| `synchronized` | Methods, blocks          | Ensures thread safety |
| `volatile` | Variables                     | Ensures consistent variable value in multi-threading |
| `transient`| Instance variables            | Excludes from serialization |
| `strictfp` | Classes, methods, interfaces  | Ensures consistent floating-point calculations |

---

These modifiers are essential for controlling behaviors beyond access restrictions, like thread-safety, inheritance, and serialization.

Let me know if you'd like to explore any specific non-access modifiers in more detail!