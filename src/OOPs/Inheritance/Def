Inheritance
Java Inheritance (Subclass and Superclass)
In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

subclass (child) - the class that inherits from another class
superclass (parent) - the class being inherited from
To inherit from a class, use the extends keyword.

The final Keyword
If you don't want other classes to inherit from a class, use the final keyword:

If you try to access a final class, Java will generate an error:
The final keyword in Java is used to define constants, prevent method overriding, and prevent inheritance. It can be applied to variables, methods, and classes.
Key Points:
Final Variables: Cannot be reassigned after initialization.
Final Methods: Cannot be overridden by subclasses.
Final Classes: Cannot be subclassed.
Final Parameters: Cannot be modified within the method.
Final Local Variables: Can only be assigned once within a method


Inheritance in Java
Inheritance is another key concept in Object-Oriented Programming (OOP) that allows one class to inherit properties and behaviors (fields and methods) from another class. It promotes code reuse, and the ability to create a hierarchical relationship between classes.

In Java, inheritance allows you to create a new class (called the subclass or child class) that inherits the members (fields and methods) of an existing class (called the superclass or parent class). The subclass can then add new members or override inherited methods to modify or extend their functionality.

Key Terms:
Superclass (Parent class): The class whose properties and methods are inherited by another class.
Subclass (Child class): The class that inherits the properties and methods of the superclass.
extends keyword: Used to indicate that a class is inheriting from another class.
Types of Inheritance in Java:
Single Inheritance: A subclass inherits from only one superclass.
Multilevel Inheritance: A class can inherit from a class that is also a subclass.
Hierarchical Inheritance: Multiple subclasses inherit from a single superclass.
Multiple Inheritance (via interfaces): Java does not support multiple inheritance (inheriting from more than one class), but a class can implement multiple interfaces.
Benefits of Inheritance:
Code Reusability: Inheritance allows the reuse of code from the parent class, so you don’t need to write the same code multiple times.
Method Overriding: Subclasses can modify or extend the behavior of methods inherited from the parent class.
Extensibility: Subclasses can add more features or modify the inherited features without changing the parent class.

super keyword
Constructor Call: super() is used to call a constructor of the superclass.
Method Call: super.methodName() is used to call a superclass method, even if it’s overridden in the subclass.
Field Access: super.fieldName is used to access a field of the superclass if the subclass has a field with the same name.
Access Parent Class Members: super allows you to access the members (fields and methods) of the superclass that are hidden or overridden by the subclass.
