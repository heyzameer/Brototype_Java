Java Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.

For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):



class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}


class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}


Method Overriding is an example of runtime polymorphism (also called dynamic polymorphism) in Java. It allows a subclass to provide a specific implementation for a method that is already defined in its superclass. The method that gets called is determined at runtime, based on the actual object being referenced, even if it is referred to by a superclass type.



Rules for Method Overriding:
The method in the subclass must have the same signature (method name, return type, and parameters) as in the superclass.
The overriding method cannot have a more restrictive access modifier than the method in the superclass. For example, if the method in the superclass is public, the overriding method cannot be private or protected.
The subclass can throw fewer or narrower checked exceptions, but not broader exceptions than the method in the superclass.
Static methods cannot be overridden. They are bound at compile-time, and method overriding works at runtime.