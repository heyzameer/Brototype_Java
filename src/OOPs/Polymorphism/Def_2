### **Polymorphism in Java**

Polymorphism is one of the core principles of Object-Oriented Programming. It means **"many forms"** and allows a single interface to be used for different underlying forms (data types or classes).

There are two types of polymorphism in Java:

1. **Compile-Time Polymorphism (Method Overloading)**
2. **Runtime Polymorphism (Method Overriding)**

---

### **1. Method Overloading (Compile-Time Polymorphism)**

- **Definition**: It allows multiple methods in the same class to have the same name but different parameters (type, number, or both).
- **Binding**: It is resolved during compile time.
- **Example**:
```java
class Calculator {
    // Overloaded method: Same name, different parameters
    public int add(int a, int b) {
        return a + b;
    }

    public double add(double a, double b) {
        return a + b;
    }

    public int add(int a, int b, int c) {
        return a + b + c;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        System.out.println(calc.add(5, 10));       // Calls add(int, int)
        System.out.println(calc.add(5.5, 10.5));  // Calls add(double, double)
        System.out.println(calc.add(1, 2, 3));    // Calls add(int, int, int)
    }
}
```
**Output**:
```
15
16.0
6
```

**Key Points**:
- Overloaded methods must differ in **parameter list** (number or type of arguments).
- Return type alone **does not differentiate** overloaded methods.

---

### **2. Method Overriding (Runtime Polymorphism)**

- **Definition**: It allows a subclass to provide a specific implementation of a method already defined in its superclass.
- **Binding**: It is resolved during runtime.
- **Example**:
```java
class Animal {
    public void sound() {
        System.out.println("Animals make sounds");
    }
}

class Dog extends Animal {
    // Overriding the sound method
    @Override
    public void sound() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    @Override
    public void sound() {
        System.out.println("Cat meows");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myAnimal;

        myAnimal = new Dog();
        myAnimal.sound(); // Outputs: Dog barks

        myAnimal = new Cat();
        myAnimal.sound(); // Outputs: Cat meows
    }
}
```
**Output**:
```
Dog barks
Cat meows
```

**Key Points**:
- Overridden methods **must have the same method signature** (name and parameter list).
- The method in the parent class must be marked as `virtual` (implicitly `virtual` in Java, no keyword is needed).
- The method in the subclass must be marked with `@Override` (optional but recommended).

---

### **Differences Between Overloading and Overriding**

| **Feature**            | **Method Overloading**                     | **Method Overriding**                      |
|-------------------------|--------------------------------------------|--------------------------------------------|
| **Definition**          | Same method name, different parameters.   | Subclass redefines a method of the parent. |
| **Binding**             | Compile-time                              | Runtime                                    |
| **Inheritance**         | Not required                              | Requires inheritance                       |
| **Parameters**          | Must differ                               | Must be the same                           |
| **Return Type**         | Can differ                                | Must be the same (or covariant)            |

---

### **Polymorphism in Action**
By combining overriding and dynamic method dispatch, polymorphism is demonstrated when objects of different subclasses are treated as instances of their parent class. This allows flexible and reusable code.

Example:
```java
class Shape {
    public void draw() {
        System.out.println("Drawing a Shape");
    }
}

class Circle extends Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}

class Rectangle extends Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

public class Main {
    public static void main(String[] args) {
        Shape s1 = new Circle();    // Polymorphism
        Shape s2 = new Rectangle(); // Polymorphism

        s1.draw(); // Outputs: Drawing a Circle
        s2.draw(); // Outputs: Drawing a Rectangle
    }
}
```

---

This showcases **runtime polymorphism**, where the method that gets called is determined dynamically at runtime based on the object's actual type.